/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/readyz": {
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        /** Not ready */
        503: {
          content: {
            "application/json": {
              unhealthy: string[];
            };
          };
        };
      };
    };
  };
  "/v1/tokens": {
    post: {
      parameters: {
        query: {
          cookie?: "write";
        };
      };
      responses: {
        /** Created */
        201: {
          content: {
            "application/json": {
              jwt: string;
            };
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": {
            username: string;
            password: string;
          };
        };
      };
    };
  };
  "/v1/tokens/refresh": {
    post: {
      parameters: {
        query: {
          cookie?: "write";
        };
      };
      responses: {
        /** Created */
        201: {
          content: {
            "application/json": {
              jwt: string;
            };
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  "/v1/tokens/clear": {
    post: {
      parameters: {
        query: {
          cookie?: "write";
        };
      };
      responses: {
        /** Cleared */
        200: {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  "/v1/version": {
    get: {
      responses: {
        /** Updated */
        200: {
          content: {
            "application/json": {
              version: string;
              commit: string;
            };
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/v1/me": {
    get: {
      responses: {
        /** Updated */
        200: {
          content: {
            "application/json": {
              username: string;
            };
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/v1/me/password": {
    post: {
      parameters: {
        query: {
          cookie?: "write";
        };
      };
      responses: {
        /** Updated */
        204: {
          content: {
            "application/json": unknown;
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": {
            password: string;
          };
        };
      };
    };
  };
  "/v1/master-domains": {
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["MasterDomain"][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/v1/master-domains/{masterDomainHostname}": {
    delete: {
      parameters: {
        path: {
          masterDomainHostname: string;
        };
      };
      responses: {
        /** Deleted */
        204: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        masterDomainHostname: string;
      };
    };
  };
  "/v1/master-domains-in-projects": {
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              [key: string]: components["schemas"]["Project"][];
            };
          };
        };
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/v1/upgrade-lock": {
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/v1/self-update": {
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              isEnabled: boolean;
              availableUpdateVersion: string | null;
            };
          };
        };
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
    };
    post: {
      responses: {
        /** Scheduled */
        200: {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": {
            version: string;
          };
        };
      };
    };
  };
  "/v1/registries": {
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["Registry"][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
    };
    post: {
      responses: {
        /** Created */
        201: {
          content: {
            "application/json": components["schemas"]["Registry"];
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": {
            name: components["schemas"]["RegistryName"];
            url: components["schemas"]["RegistryUrl"];
            authToken: components["schemas"]["AuthTokenValue"];
          };
        };
      };
    };
  };
  "/v1/registries/{registryId}": {
    post: {
      parameters: {
        path: {
          registryId: string;
        };
      };
      responses: {
        /** Updated */
        200: {
          content: {
            "application/json": components["schemas"]["Registry"];
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": {
            name?: components["schemas"]["RegistryName"];
            url?: components["schemas"]["RegistryUrl"];
            authToken?: components["schemas"]["AuthTokenValue"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          registryId: string;
        };
      };
      responses: {
        /** Deleted */
        204: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        registryId: string;
      };
    };
  };
  "/v1/registries-in-apps": {
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              [key: string]: components["schemas"]["App"][];
            };
          };
        };
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/v1/users": {
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["User"][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
    };
    post: {
      responses: {
        /** Created */
        201: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": {
            username: components["schemas"]["UserUsername"];
          };
        };
      };
    };
  };
  "/v1/users/{userId}": {
    delete: {
      parameters: {
        path: {
          userId: string;
        };
      };
      responses: {
        /** Deleted */
        204: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        userId: string;
      };
    };
  };
  "/v1/services": {
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              loki: {
                isEnabled: boolean;
              };
            };
          };
        };
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/v1/app-charts": {
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["AppChart"][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/v1/projects": {
    get: {
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["Project"][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/v1/projects/{projectId}": {
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["Project"];
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        projectId: string;
      };
    };
  };
  "/v1/projects/{projectId}/apps": {
    get: {
      parameters: {
        path: {
          projectId: string;
        };
        query: {
          appChartId?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["App"][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    post: {
      parameters: {
        path: {
          projectId: string;
        };
        query: {
          appChartId?: string;
        };
      };
      responses: {
        /** Created */
        201: {
          content: {
            "application/json": components["schemas"]["App"];
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["App"]["values"] & {
            name: components["schemas"]["AppName"];
          };
        };
      };
    };
    parameters: {
      path: {
        projectId: string;
      };
      query: {
        appChartId?: string;
      };
    };
  };
  "/v1/projects/{projectId}/domains": {
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["Domain"][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** Created */
        201: {
          content: {
            "application/json": components["schemas"]["Domain"];
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": {
            hostname: components["schemas"]["DomainHostname"];
            path: components["schemas"]["DomainPath"];
            appId: components["schemas"]["DomainAppId"];
            appServiceTargetId: components["schemas"]["DomainAppServiceTargetId"];
            targetPort: components["schemas"]["DomainTargetPort"];
          };
        };
      };
    };
    parameters: {
      path: {
        projectId: string;
      };
    };
  };
  "/v1/projects/{projectId}/files": {
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["File"][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    post: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** Created */
        201: {
          content: {
            "application/json": components["schemas"]["File"];
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": {
            name: components["schemas"]["FileName"];
            isSecret: components["schemas"]["FileIsSecret"];
            content: components["schemas"]["FileContent"];
          };
        };
      };
    };
    parameters: {
      path: {
        projectId: string;
      };
    };
  };
  "/v1/projects/{projectId}/files/linked-apps": {
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              [key: string]: components["schemas"]["App"][];
            };
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        projectId: string;
      };
    };
  };
  "/v1/projects/{projectId}/metrics": {
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              app?: {
                name?: string;
              };
              pods?: {
                id?: string;
                containerAmount?: number;
                memoryUsageMb?: string;
                memoryLimitMb?: string;
                cpuUsage?: string;
                cpuLimit?: string;
              }[];
            }[];
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
        /** Metrics Server is unavailable */
        503: {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
      };
    };
    parameters: {
      path: {
        projectId: string;
      };
    };
  };
  "/v1/projects/{projectId}/logs": {
    get: {
      parameters: {
        path: {
          projectId: string;
        };
        query: {
          sources: components["parameters"]["GetLogsParamSources"];
          startTime: components["parameters"]["GetLogsParamStartTime"];
          endTime: components["parameters"]["GetLogsParamEndTime"];
          limit: components["parameters"]["GetLogsParamLimit"];
          format?: components["parameters"]["GetLogsParamFormat"];
        };
      };
      responses: {
        200: components["responses"]["LogDataResponse"];
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        projectId: string;
      };
      query: {
        sources: components["parameters"]["GetLogsParamSources"];
        startTime: components["parameters"]["GetLogsParamStartTime"];
        endTime: components["parameters"]["GetLogsParamEndTime"];
        limit: components["parameters"]["GetLogsParamLimit"];
        format?: components["parameters"]["GetLogsParamFormat"];
      };
    };
  };
  "/v1/projects/{projectId}/logs/sources": {
    get: {
      parameters: {
        path: {
          projectId: string;
        };
      };
      responses: {
        200: components["responses"]["LogSourcesResponse"];
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        projectId: string;
      };
    };
  };
  "/v1/domains/{domainId}": {
    post: {
      parameters: {
        path: {
          domainId: string;
        };
      };
      responses: {
        /** Updated */
        200: {
          content: {
            "application/json": components["schemas"]["Domain"];
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": {
            path: components["schemas"]["DomainPath"];
            appId: components["schemas"]["DomainAppId"];
            appServiceTargetId: components["schemas"]["DomainAppServiceTargetId"];
            targetPort: components["schemas"]["DomainTargetPort"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          domainId: string;
        };
      };
      responses: {
        /** Deleted */
        204: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        domainId: string;
      };
    };
  };
  "/v1/files/{fileId}": {
    get: {
      parameters: {
        path: {
          fileId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["File"];
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    post: {
      parameters: {
        path: {
          fileId: string;
        };
      };
      responses: {
        /** Updated */
        200: {
          content: {
            "application/json": components["schemas"]["File"];
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": {
            name: components["schemas"]["FileName"];
            isSecret: components["schemas"]["FileIsSecret"];
            content: components["schemas"]["FileContent"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          fileId: string;
        };
      };
      responses: {
        /** Deleted */
        204: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        fileId: string;
      };
    };
  };
  "/v1/apps/{appId}": {
    get: {
      parameters: {
        path: {
          appId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["App"];
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    post: {
      parameters: {
        path: {
          appId: string;
        };
      };
      responses: {
        /** Updated */
        200: {
          content: {
            "application/json": components["schemas"]["App"];
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["App"]["values"] & {
            name: components["schemas"]["AppName"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          appId: string;
        };
      };
      responses: {
        /** Deleted */
        204: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        appId: string;
      };
    };
  };
  "/v1/apps/{appId}/deployments": {
    get: {
      parameters: {
        path: {
          appId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["Deployment"][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        appId: string;
      };
    };
  };
  "/v1/apps/{appId}/releases": {
    get: {
      parameters: {
        path: {
          appId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["Release"][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    post: {
      parameters: {
        path: {
          appId: string;
        };
      };
      responses: {
        /** Created */
        201: {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Release"]["values"];
        };
      };
    };
    parameters: {
      path: {
        appId: string;
      };
    };
  };
  "/v1/apps/{appId}/runs": {
    get: {
      parameters: {
        path: {
          appId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["Run"][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        appId: string;
      };
    };
  };
  "/v1/apps/{appId}/runs/{runReleaseId}": {
    delete: {
      parameters: {
        path: {
          runReleaseId: string;
        };
      };
      responses: {
        /** Deleted */
        204: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        runReleaseId: string;
      };
    };
  };
  "/v1/apps/{appId}/deploy-hooks": {
    get: {
      parameters: {
        path: {
          appId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["DeployHook"][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    post: {
      parameters: {
        path: {
          appId: string;
        };
      };
      responses: {
        /** Created */
        201: {
          content: {
            "application/json": components["schemas"]["DeployHook"];
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": {
            name: components["schemas"]["DeployHookName"];
          };
        };
      };
    };
    parameters: {
      path: {
        appId: string;
      };
    };
  };
  "/v1/apps/{appId}/domains": {
    get: {
      parameters: {
        path: {
          appId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["Domain"][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    post: {
      parameters: {
        path: {
          appId: string;
        };
      };
      responses: {
        /** Created */
        201: {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Domain"];
        };
      };
    };
    parameters: {
      path: {
        appId: string;
      };
    };
  };
  "/v1/apps/{appId}/logs": {
    get: {
      parameters: {
        path: {
          appId: string;
        };
        query: {
          logTargetId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": string[][];
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        appId: string;
      };
      query: {
        logTargetId: string;
      };
    };
  };
  "/v1/deploy-hooks/{deployHookId}": {
    delete: {
      parameters: {
        path: {
          deployHookId: string;
        };
      };
      responses: {
        /** Deleted */
        204: {
          content: {
            "application/json": unknown;
          };
        };
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        deployHookId: string;
      };
    };
  };
  "/v1/system-logs/{category}": {
    get: {
      parameters: {
        path: {
          category: "shipmight" | "kube-system";
        };
        query: {
          sources: components["parameters"]["GetLogsParamSources"];
          startTime: components["parameters"]["GetLogsParamStartTime"];
          endTime: components["parameters"]["GetLogsParamEndTime"];
          limit: components["parameters"]["GetLogsParamLimit"];
          format?: components["parameters"]["GetLogsParamFormat"];
        };
      };
      responses: {
        200: components["responses"]["LogDataResponse"];
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        category: "shipmight" | "kube-system";
      };
      query: {
        sources: components["parameters"]["GetLogsParamSources"];
        startTime: components["parameters"]["GetLogsParamStartTime"];
        endTime: components["parameters"]["GetLogsParamEndTime"];
        limit: components["parameters"]["GetLogsParamLimit"];
        format?: components["parameters"]["GetLogsParamFormat"];
      };
    };
  };
  "/v1/system-logs/{category}/sources": {
    get: {
      parameters: {
        path: {
          category: "shipmight" | "kube-system";
        };
      };
      responses: {
        200: components["responses"]["LogSourcesResponse"];
        401: components["responses"]["AuthorizationError"];
        404: components["responses"]["NotFoundError"];
        500: components["responses"]["ServerError"];
      };
    };
    parameters: {
      path: {
        category: "shipmight" | "kube-system";
      };
    };
  };
  "/v1/dh": {
    post: {
      parameters: {
        header: {
          "x-deploy-hook-token": string;
        };
      };
      responses: {
        /** Created */
        201: {
          content: {
            "application/json": components["schemas"]["Release"]["values"];
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["AuthorizationError"];
        500: components["responses"]["ServerError"];
      };
      requestBody: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    parameters: {
      header: {
        "x-deploy-hook-token": string;
      };
    };
  };
}

export interface components {
  schemas: {
    GenericNameValue: string;
    ImageNameValue: string;
    ImageTagValue: string;
    UsernameValue: string;
    ShipmightYamlTargetIdValue: string;
    DateTimeValue: string;
    AuthTokenValue: string;
    RegistryId: string;
    RegistryName: components["schemas"]["GenericNameValue"];
    RegistryUrl: string;
    RegistryAuthMethod: "NONE" | "TOKEN";
    Registry: {
      id: components["schemas"]["RegistryId"];
      name: components["schemas"]["RegistryName"];
      url: components["schemas"]["RegistryUrl"];
      authMethod: components["schemas"]["RegistryAuthMethod"];
    };
    SingleLineTextInput: {
      type: "SingleLineText";
      defaultValue?: string;
      placeholder?: string;
    };
    RegistrySelectInput: {
      type: "RegistrySelect";
    };
    EnvironmentVariablesInput: {
      type: "EnvironmentVariables";
      defaultValue?: {
        name: string;
        value: string;
      }[];
      fromPreset?: string;
    };
    EnvironmentVariablesPresetInput: {
      type: "EnvironmentVariablesPreset";
      defaultValue?: {
        name: string;
        value: string;
        options: string[];
      }[];
    };
    FileMountsInput: {
      type: "FileMounts";
      defaultValue?: {
        fileId: string;
        mountPath: string;
      }[];
    };
    NumberInput: {
      type: "Number";
      defaultValue?: number;
      rightLabel?: string;
      presets?: number[];
      setToEmptyString?: string;
      showSecondsInHumanFriendlyTime?: boolean;
    };
    ImageTagInput: {
      type: "ImageTag";
      defaultValue?: string;
      registryUrlFromFieldId?: string;
      imageNameFromFieldId?: string;
    };
    DeploymentReleaseManagerTabSpec: {
      type: "DeploymentReleaseManager";
    };
    ConfigurationFormTabSpec: {
      type: "ConfigurationForm";
    };
    LogViewerTabSpec: {
      type: "LogViewer";
      logTargetId: string;
    };
    JobReleaseManagerTabSpec: {
      type: "JobReleaseManager";
    };
    ShipmightYaml: {
      version: "v1";
      uuidFromFieldId?: string;
      historyMax: number;
      terminology: {
        singular: string;
        plural: string;
        singularCapitalized: string;
        pluralCapitalized: string;
      };
      tabs: {
        id: string;
        name: string;
        isDefault?: boolean;
        content:
          | components["schemas"]["DeploymentReleaseManagerTabSpec"]
          | components["schemas"]["ConfigurationFormTabSpec"]
          | components["schemas"]["LogViewerTabSpec"]
          | components["schemas"]["JobReleaseManagerTabSpec"];
      }[];
      logTargets: {
        id: components["schemas"]["ShipmightYamlTargetIdValue"];
        name: string;
      }[];
      serviceTargets: {
        id: components["schemas"]["ShipmightYamlTargetIdValue"];
        name: string;
      }[];
      metricsTargets?: {
        id: components["schemas"]["ShipmightYamlTargetIdValue"];
        name: string;
      }[];
      fields: {
        id: string;
        immutable?: boolean;
        useForUuid?: boolean;
        name: string;
        help?: string;
        input:
          | components["schemas"]["SingleLineTextInput"]
          | components["schemas"]["RegistrySelectInput"]
          | components["schemas"]["EnvironmentVariablesInput"]
          | components["schemas"]["EnvironmentVariablesPresetInput"]
          | components["schemas"]["FileMountsInput"]
          | components["schemas"]["NumberInput"]
          | components["schemas"]["ImageTagInput"];
      }[];
      configurationCards: string[][];
      releaseCards: string[][];
      listCard: {
        nameFieldId: string;
        extraDetailFieldIds?: string[];
      };
    };
    /** An object complying to http://json-schema.org/draft-07/schema */
    JsonSchemaDraft7: { [key: string]: unknown };
    InternalHelmChart: {
      internalChartName: string;
    };
    InstalledHelmChart: {
      installedChartName: string;
    };
    HelmChart:
      | components["schemas"]["InternalHelmChart"]
      | components["schemas"]["InstalledHelmChart"];
    AppChart: {
      id: string;
      chart: components["schemas"]["HelmChart"];
      spec: components["schemas"]["ShipmightYaml"];
      schema: components["schemas"]["JsonSchemaDraft7"];
    };
    UserId: string;
    UserUsername: components["schemas"]["UsernameValue"];
    UserPassword: string;
    UserMustChangePassword: boolean;
    User: {
      id: components["schemas"]["UserId"];
      username: components["schemas"]["UserUsername"];
      password?: components["schemas"]["UserPassword"];
      mustChangePassword: components["schemas"]["UserMustChangePassword"];
    };
    ProjectId: string;
    ProjectName: components["schemas"]["GenericNameValue"];
    Project: {
      id: components["schemas"]["ProjectId"];
      name: components["schemas"]["ProjectName"];
    };
    AppId: string;
    AppProjectId: string;
    AppAppChartId: string;
    AppName: components["schemas"]["GenericNameValue"];
    App: {
      id: components["schemas"]["AppId"];
      projectId: components["schemas"]["AppProjectId"];
      appChartId: components["schemas"]["AppAppChartId"];
      name: components["schemas"]["AppName"];
      values: { [key: string]: unknown };
    };
    DeploymentReleaseId: string;
    DeploymentCreatedAt: string;
    DeploymentReplicas: number;
    DeploymentReadyReplicas: number;
    DeploymentPodStatuses: {
      status: "PENDING" | "ERRORED" | "RUNNING" | "UNKNOWN";
      message?: string;
    }[];
    Deployment: {
      releaseId: components["schemas"]["DeploymentReleaseId"];
      createdAt: components["schemas"]["DeploymentCreatedAt"];
      replicas: components["schemas"]["DeploymentReplicas"];
      readyReplicas: components["schemas"]["DeploymentReadyReplicas"];
      podStatuses: components["schemas"]["DeploymentPodStatuses"];
    };
    RunReleaseId: string;
    RunJobStatus: {
      status: "FAILED" | "RUNNING" | "SUCCEEDED" | "UNKNOWN";
      message?: string;
    };
    RunCreatedAt: string;
    Run: {
      releaseId: components["schemas"]["RunReleaseId"];
      jobStatus: components["schemas"]["RunJobStatus"];
      createdAt: components["schemas"]["RunCreatedAt"];
    };
    ReleaseId: string;
    ReleaseProjectId: string;
    ReleaseAppId: string;
    ReleaseCreatedAt: string;
    Release: {
      id: components["schemas"]["ReleaseId"];
      projectId: components["schemas"]["ReleaseProjectId"];
      appId: components["schemas"]["ReleaseAppId"];
      values: { [key: string]: unknown };
      createdAt: components["schemas"]["ReleaseCreatedAt"];
    };
    DeployHookId: string;
    DeployHookProjectId: string;
    DeployHookAppId: string;
    DeployHookName: components["schemas"]["GenericNameValue"];
    DeployHookToken: string;
    DeployHookLastUsedAt: string;
    DeployHookCreatedAt: string;
    DeployHook: {
      id: components["schemas"]["DeployHookId"];
      projectId: components["schemas"]["DeployHookProjectId"];
      appId: components["schemas"]["DeployHookAppId"];
      name: components["schemas"]["DeployHookName"];
      token?: components["schemas"]["DeployHookToken"];
      lastUsedAt: components["schemas"]["DeployHookLastUsedAt"];
      createdAt: components["schemas"]["DeployHookCreatedAt"];
    };
    MasterDomainHostname: string;
    MasterDomainCertManagerClusterIssuer: string | null;
    MasterDomainTlsCertificateStatus: "NONE" | "UPDATING" | "READY";
    MasterDomain: {
      hostname: components["schemas"]["MasterDomainHostname"];
      certManagerClusterIssuer?: components["schemas"]["MasterDomainCertManagerClusterIssuer"];
      tlsCertificateStatus: components["schemas"]["MasterDomainTlsCertificateStatus"];
    };
    DomainId: string;
    DomainProjectId: string;
    DomainPath: string;
    DomainHostname: string;
    DomainAppId: string | null;
    DomainAppServiceTargetId: string | null;
    DomainTargetPort: number;
    Domain: {
      id: components["schemas"]["DomainId"];
      projectId: components["schemas"]["DomainProjectId"];
      hostname: components["schemas"]["DomainHostname"];
      path: components["schemas"]["DomainPath"];
      appId: components["schemas"]["DomainAppId"];
      appServiceTargetId: components["schemas"]["DomainAppServiceTargetId"];
      targetPort: components["schemas"]["DomainTargetPort"];
    };
    FileId: string;
    FileProjectId: string;
    FileName: string;
    FileIsSecret: boolean;
    FileContent: string;
    FileRevision: number;
    File: {
      id: components["schemas"]["FileId"];
      projectId: components["schemas"]["FileProjectId"];
      name: components["schemas"]["FileName"];
      isSecret: components["schemas"]["FileIsSecret"];
      content: components["schemas"]["FileContent"];
      revision: components["schemas"]["FileRevision"];
    };
  };
  responses: {
    /** LogSourcesResponse */
    LogSourcesResponse: {
      content: {
        "application/json": {
          id: string;
          name: string;
        }[];
      };
    };
    /** LogDataResponse */
    LogDataResponse: {
      content: {
        "application/json": string[][];
        "text/csv": string;
        "application/x-ndjson": string;
      };
    };
    /** ValidationError */
    ValidationError: {
      content: {
        "application/json": {
          error: {
            name: string;
            message: string;
            errors: {
              path: string;
              message: string;
            }[];
          };
          requestId: string;
        };
      };
    };
    /** AuthorizationError */
    AuthorizationError: {
      content: {
        "application/json": {
          error: {
            name: string;
            message: string;
          };
          requestId: string;
        };
      };
    };
    /** NotFoundError */
    NotFoundError: {
      content: {
        "application/json": {
          error: {
            name: string;
            message: string;
          };
          requestId: string;
        };
      };
    };
    /** ServerError */
    ServerError: {
      content: {
        "application/json": {
          error: {
            name: string;
            message: string;
          };
          requestId: string;
        };
      };
    };
  };
  parameters: {
    GetLogsParamSources: string;
    GetLogsParamStartTime: string;
    GetLogsParamEndTime: string;
    GetLogsParamLimit: string;
    GetLogsParamFormat: "json" | "csv-download" | "ndjson-download";
  };
}

export interface operations {}

export interface external {}
